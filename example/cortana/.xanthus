# -*- mode: ruby -*-
# vi: set ft=ruby


# -*- mode: ruby -*-
# vi: set ft=ruby

Xanthus.configure do |config|
  config.name = 'cortana'
  config.authors = 'Xueyuan Michael Han'
  config.affiliation = 'Harvard University'
  config.email = 'hanx@g.harvard.edu'
  config.description = %q{
A simple Cortana example to demonstrate:

* Xanthus' compatibility with Metasploit, Armitage, and Cortana

A standard Kali Linux machine is spawned to simulate an adversarial scenario where an Armitage team server is set up to attack a vulnerable Metasploitable 2 machine.
The Metasploitable 2 machine can be set up to be monitored by an audit system or a provenance capture system.

Cortana is used to create automated bots that exploit the vulnerability in the Metasploitable 2 machine.

In this simple example, it takes advantage of the FTP vulnerability in the machine and uses the 'vsftpd_234_backdoor' module in Metasploit.
Once a backdoor is installed, the attacker (Kali Linux) is able to create an reverse shell through the payload and control the Metasploitable 2 machine.

We show that the attack succeeds by printing "whoami" command result of the victim machine to the attacker's console.

Everything is done automatically through scripts for reproducility with minimum human interaction.
}
  config.seed = 166888230855672536133121644429931067516

  config.script :camflow_start do
    Xanthus::CAMFLOW_START
  end

  config.script :spade_start do
    Xanthus::SPADE_START
  end

  config.script :camflow_stop do
    Xanthus::CAMFLOW_STOP
  end

  config.script :spade_stop do
    Xanthus::SPADE_STOP
  end

  config.script :victim do
    %q{%{
      sleep 10
    }}
  end

  # Run Metasploit, Armitage team server, and Cortana
  config.script :attacker do
    %q{%{
      msfdb init
      sudo -E teamserver 192.168.33.10 password &
      sleep 60
      cd /usr/share/armitage
      java -jar cortana.jar /vagrant/local.prop /vagrant/demo.cna
    }}
  end

  # Run commands before setting up any machines
  config.script :before do
    %q{%{
      cd attacker && git clone https://github.com/Sliim/pentest-env.git
    }}
  end

  # Run commands after all machines are finished
  config.script :after do
    %q{%{
      cd attacker && rm -rf pentest-env
    }}
  end

  config.vm :victim do |vm|
    vm.box = 'e314c/metasploitable2'
    vm.memory = 8192
    vm.version = '0.0.1'
    vm.ip = '192.168.33.8'
  end

  config.vm :attacker do |vm|
    vm.box = 'Sliim/kali-2018.1-amd64'
    vm.version = '1'
    vm.ip = '192.168.33.10'
    vm.ssh_username = 'root'
    vm.ssh_key_path = 'pentest-env/ssh-keys/pentest-env'
  end

  config.job :cortana do |job|
    job.iterations = 1
    job.pre_instructions = [:before]
    job.post_instructions = [:after]
    job.tasks = {victim: [:victim], attacker: [:attacker]}
    job.inputs = {attacker: ['local.prop', 'demo.cna']}
  end

  # config.dataverse do |dataverse|
  #   dataverse.server = <ADD DATAVERSE BASE URL>
  #   dataverse.repo = <PROVIDE DATAVERSE NAME>
  #   dataverse.token = <PROVIDE DATAVERSE TOKEN>
  #   dataverse.subject = <PROVIDE DATAVERSE SUBJECT (e.g. engineering)>
  # end
end
